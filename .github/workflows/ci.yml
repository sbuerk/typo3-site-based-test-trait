name: "CI"

on:
  pull_request:
  workflow_dispatch:

jobs:

  code-quality:
    name: "code quality"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: [ "8.1" ]
    permissions:
      # actions: read|write|none
      actions: none
      # checks: read|write|none
      checks: none
      # contents: read|write|none
      contents: read
      # deployments: read|write|none
      deployments: none
      # id-token: read|write|none
      id-token: none
      # issues: read|write|none
      issues: none
      # discussions: read|write|none
      discussions: none
      # packages: read|write|none
      packages: read
      # pages: read|write|none
      pages: none
      # pull-requests: read|write|none
      pull-requests: none
      # repository-projects: read|write|none
      repository-projects: read
      # security-events: read|write|none
      security-events: none
      # statuses: read|write|none
      statuses: none
    steps:

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Prepare dependencies"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "CGL"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s cgl -n"
        
      - name: "Static code analyzer"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s phpstan"

  linting:
    name: "linting"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: [ "8.1", "8.2", "8.3", "8.4" ]
    permissions:
      # actions: read|write|none
      actions: none
      # checks: read|write|none
      checks: none
      # contents: read|write|none
      contents: read
      # deployments: read|write|none
      deployments: none
      # id-token: read|write|none
      id-token: none
      # issues: read|write|none
      issues: none
      # discussions: read|write|none
      discussions: none
      # packages: read|write|none
      packages: read
      # pages: read|write|none
      pages: none
      # pull-requests: read|write|none
      pull-requests: none
      # repository-projects: read|write|none
      repository-projects: read
      # security-events: read|write|none
      security-events: none
      # statuses: read|write|none
      statuses: none
    steps:

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Prepare dependencies"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "Run PHP lint"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s lintPhp"

  unit:
    name: "unit"
    runs-on: ubuntu-latest
    needs: ["code-quality", "linting"]
    strategy:
      fail-fast: false
      matrix:
        php-version: [ "8.1", "8.2", "8.3", "8.4" ]
    permissions:
      # actions: read|write|none
      actions: none
      # checks: read|write|none
      checks: none
      # contents: read|write|none
      contents: read
      # deployments: read|write|none
      deployments: none
      # id-token: read|write|none
      id-token: none
      # issues: read|write|none
      issues: none
      # discussions: read|write|none
      discussions: none
      # packages: read|write|none
      packages: read
      # pages: read|write|none
      pages: none
      # pull-requests: read|write|none
      pull-requests: none
      # repository-projects: read|write|none
      repository-projects: read
      # security-events: read|write|none
      security-events: none
      # statuses: read|write|none
      statuses: none

    steps:

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Prepare dependencies"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "Execute unit tests"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s unit"

  functional:
    name: "functional"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        php-version: [ "8.1", "8.2", "8.3", "8.4" ]
    needs: ["code-quality", "linting", "unit"]
    permissions:
      # actions: read|write|none
      actions: none
      # checks: read|write|none
      checks: none
      # contents: read|write|none
      contents: read
      # deployments: read|write|none
      deployments: none
      # id-token: read|write|none
      id-token: none
      # issues: read|write|none
      issues: none
      # discussions: read|write|none
      discussions: none
      # packages: read|write|none
      packages: read
      # pages: read|write|none
      pages: none
      # pull-requests: read|write|none
      pull-requests: none
      # repository-projects: read|write|none
      repository-projects: read
      # security-events: read|write|none
      security-events: none
      # statuses: read|write|none
      statuses: none

    steps:

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Prepare dependencies"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "functional with SQLite"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -d sqlite -s functional"

      - name: "functional with MySQL 8.0"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -d mysql -i 8.0 -s functional"

      - name: "functional with MariaDB 10.4"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -d mariadb -i 10.4 -s functional"

      - name: "functional with MariaDB 10.6"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -d mariadb -i 10.6 -s functional"

      - name: "functional with Postgres 10"
        run: "Build/Scripts/runTests.sh -p ${{ matrix.php-version }} -d postgres -i 10 -s functional"